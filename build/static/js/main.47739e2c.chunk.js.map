{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","className","react_default","a","createElement","content","onClick","notes","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","errorDelay","Notification","message","length","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","eventHandler","console","log","setState","addNote","event","preventDefault","state","newNote","trim","noteObject","Date","toISOString","Math","random","noteService","toggleVisible","showAll","handleNoteChange","target","value","toggleImportanceOf","find","n","changedNote","objectSpread","filter","catch","error","errorMessage","setTimeout","_this2","notesCollection","App_Notification","map","components_Note","key","onSubmit","onChange","type","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.47739e2c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? \"mark not important\" : \"mark important\"\r\n    let className = \"\"\r\n    if (note.important) {\r\n        className += \"important\"\r\n    } else {\r\n        className += \"not-important\"\r\n    }\r\n    return (\r\n        <li><span className={className}>{note.content}</span> <small>(<span className=\"toggle-importance\" onClick={toggleImportance}>{label}</span>)</small></li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from \"axios\"\r\n\r\nconst baseUrl = \"/api/notes\"\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: \"Doesn't exist (this is a test item)\",\r\n        date: \"1970\",\r\n        important: true\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n\r\n    // TODO: Log the response data somehow.\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\n\r\nconst errorDelay = 2000\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null || message.length === 0) {\r\n        return null\r\n    }\r\n    return (\r\n        <div id=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            notes: [],\r\n            showAll: true, // We show all notes, important and not important.\r\n            newNote: \"\",\r\n            errorMessage: null\r\n        }\r\n        console.log(\"Constructor called.\")\r\n    }\r\n\r\n    eventHandler = (notes) => {\r\n        console.log(\"Promise fulfilled.\")\r\n        this.setState({ notes })\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Mount.\")\r\n        const promise = noteService.getAll()\r\n        promise.then(this.eventHandler)\r\n    }\r\n\r\n    addNote = (event) => {\r\n        // Prevent the page from reloading. This is a SPA, we don't need page reloads.\r\n        event.preventDefault()\r\n\r\n        if (this.state.newNote.trim().length === 0) {\r\n            // alert(\"Please write something.\")\r\n            return\r\n        }\r\n\r\n        const noteObject = {\r\n            content: this.state.newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5\r\n        }\r\n\r\n        noteService.create(noteObject).then(newNote => {\r\n            this.setState({ notes: this.state.notes.concat(newNote), newNote: \"\" })\r\n        })\r\n    }\r\n\r\n    toggleVisible = () => {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        })\r\n    }\r\n\r\n    handleNoteChange = (event) => this.setState({ newNote: event.target.value })\r\n\r\n    toggleImportanceOf = (id) => {\r\n        return () => {\r\n\r\n            const note = this.state.notes.find(n => n.id === id)\r\n            const changedNote = { ...note, important: !note.important }\r\n\r\n            console.log(`Need to toggle importance of note ${note.id}.`)\r\n\r\n            noteService.update(id, changedNote)\r\n                .then(changedNote => {\r\n                    const notes = this.state.notes.filter(n => n.id !== id)\r\n                    this.setState({ notes: notes.concat(changedNote) })\r\n                }).catch(error => {\r\n                    this.setState({\r\n                        notes: this.state.notes.filter(n => n.id !== id),\r\n                        errorMessage: `Note ${id} has already been deleted from the server.`\r\n                    })\r\n                    setTimeout(() => {\r\n                        this.setState({ errorMessage: null })\r\n                    }, errorDelay)\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const notesCollection = this.state.showAll ? this.state.notes : this.state.notes.filter(note => note.important === true)\r\n\r\n        const rows = () => notesCollection.map(note => <Note key={note.id} note={note} toggleImportance={this.toggleImportanceOf(note.id)} />)\r\n\r\n        const label = this.state.showAll === true ? \"only important notes\" : \"all notes\"\r\n\r\n        return (\r\n            <div>\r\n                <h1>Notes</h1>\r\n                <Notification message={this.state.errorMessage} />\r\n                <ul>\r\n                    {rows()}\r\n                </ul>\r\n                <form onSubmit={this.addNote}>\r\n                    <input value={this.state.newNote} onChange={this.handleNoteChange} />\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Save note</button>\r\n                    <button onClick={this.toggleVisible} className=\"btn btn-secondary\">Show {label}</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}